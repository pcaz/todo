package com.neotec.todo.controler;

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.12.13 at 01:14:15 PM CET 
//



import java.io.IOException;

import com.neotec.todo.ToDoProperties;
import com.neotec.todo.model.storageFactory;



/**
 * <p>Java class for ToDoList complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ToDoList">
 *   &lt;complexContent>
 *     &lt;restriction base="xsd:anyType">
 *       &lt;sequence>
 *         &lt;element name="RecurringTasks" type="RecurringTask" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Projects" type="Project" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Tasks" type="Task" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="version" type="xsd:integer" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */

public class ToDoList {

    protected RecurringTaskList recurringTasks;
    protected ProjectList projects;
    protected TaskList tasks;
    protected String version;
    protected Category categories;
    

    /**
     * Gets the value of the recurringTasks property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recurringTasks property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecurringTasks().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RecurringTaskType }
     * 
     * 
     */
    
    public ToDoList(){
    	this.recurringTasks=new RecurringTaskList();
		this.projects=new ProjectList();
		this.tasks=new TaskList();
		this.categories=new Category();
		this.version=ToDoProperties.get("version");
		
    }
  
   public Category getCategories() {
		return categories;
	}

	public void setCategories(Category categories) {
		this.categories = categories;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	public void write(String fileName, String fileFormat){
		storageFactory fc=new storageFactory();
	    fc.create(fileName,fileFormat);
	    try {
		    fc.write(this);
	    } catch (IOException e) {
		    e.printStackTrace();
	    }
	}
	/**
    * Lit le fichier de défnition des tâches ou en crée un vide si le nom du fichier est nul
    * 
    * @param fileName
    * @return la liste lue ou une nouvelle liste
    * @throws IOException
    */
   public ToDoList read(String fileName, String fileFormat) throws IOException {
   	
   	storageFactory fc=new storageFactory();
    fc.create(fileName,fileFormat);
   
	    fc.read(this);
 	    return this; 

   	
   }

public RecurringTaskList getRecurringTasks() {
	return recurringTasks;
}

public void setRecurringTasks(RecurringTaskList recurringTasks) {
	this.recurringTasks = recurringTasks;
}

public ProjectList getProjects() {
	return projects;
}

public void setProjects(ProjectList projects) {
	this.projects = projects;
}

public TaskList getTasks() {
	return tasks;
}

public void setTasks(TaskList tasks) {
	this.tasks = tasks;
}

public String getVersion() {
	return version;
}

public void put(Task task){
	tasks.put(task);
}
public void put(Project project){
	projects.put(project);
}

public void put(RecurringTask recurringTask){
	recurringTasks.put(recurringTask);
}


}
